const axios = require('axios');
const Schedule = require('../models/Schedule');
const BOM = require('../models/BOM');

// Fetch data from third-party APIs
const fetchOrders = async () => {
  const response = await axios.get('https://kera-internship.onrender.com/order');
//   console.log(response.data);
  return response.data;
};

const fetchMachines = async () => {
  const response = await axios.get('https://kera-internship.onrender.com/schedule');
  console.log(response.data);
  return response.data; // Fetching machine data from the API
};

// Helper function to create recommendation entries
const createRecommendation = (type, reason) => {
  return {
    type,
    reason,
    suggestedBy: 'System',
    createdAt: new Date(),
  };
};

// Auto-schedule production orders
const autoSchedule = async () => {
  const orders = await fetchOrders();
  const machines = await fetchMachines(); // Fetch machines from API
  const recommendations = [];

  // Loop through orders that are pending and sort by priority and delivery date
  const sortedOrders = orders
  .filter(order => order.status && typeof order.status === 'string' && order.status.toLowerCase() === 'pending')
  .sort((a, b) => a.priority - b.priority || new Date(a.deliveryDate) - new Date(b.deliveryDate));

//   console.log("üì¶ Sorted Orders to Schedule:", sortedOrders.map(o => ({
//     orderId: o.orderId,
//     status: o.status,
//     priority: o.priority
//   })));


  for (let order of sortedOrders) {
    if (order.isNonChangeable) {
      recommendations.push(createRecommendation({
        type: 'Manual Approval',
        reason: `Order ${order.orderId} is non-changeable and cannot be rescheduled.`,
      }));
      continue;
    }

    await scheduleOrder(order, recommendations, machines);
  }

  return recommendations;
};

// Function to schedule each order stage-by-stage
const scheduleOrder = async (order, recommendations, machines) => {
    const bom = await BOM.findOne({
        outputItem: { $regex: new RegExp(`^${order.item}$`, 'i') } // case-insensitive match
      });
    // console.log("bom stages::",bom?.stages);
    // console.log(`üîß BOM Stages for order ${order.orderId}:`, bom.stages.map(s => s.stageName));

  if (!bom || !bom.stages || bom.stages.length === 0){
    console.warn(`‚ö†Ô∏è No BOM found for item: ${order.item}`);
     return;
  }

     for (let stage of bom.stages) {
        console.log(`üîß Processing stage: ${stage.stageName} | BatchSize: ${stage.minQtyForNextStage} | OrderQty: ${order.quantity} | UnitMaterial: ${stage.unitMaterialPerProduct}`);

        const batchSize = stage.minQtyForNextStage; 
      
      let remainingQuantity = order.quantity * stage.unitMaterialPerProduct;  // Total material required for this stage
        const totalBatches = Math.ceil(remainingQuantity / batchSize);  // Calculate the total number of batches required for this stage
      
        let stageStartTime = new Date(); // Start time for this stage (can be adjusted as needed)
        
        console.log(`üì¶ Scheduling ${stage.stageName} in ${totalBatches} batches...`);
      
        // Now loop through the batches for this stage
        let lastBatchEndTime = new Date(); // Initialize last batch end time
        for (let batch = 1; batch <= totalBatches; batch++) {
          // Get available machine(s) for this stage
        //   console.log("üîç Available Machines:", machines.map(m => m.type));
          const availableMachines = machines.filter(
            machine => machine.process === stage.stageName && machine.status === "Idle"
          );
          console.log("üìã Matching Machines for", stage.stageName, "=>", availableMachines);
          if (!availableMachines.length) {
            console.log(`‚ö†Ô∏è No available machine for ${stage.stageName}, skipping batch ${batch}`);
            continue; // or add recommendation to outsource
          }
      
          const machine = availableMachines[0]; // pick first available machine, or use better logic
      
          // Calculate the hours required for this batch
        //   const batchHours = stage.hoursRequiredMinQty;
        //   const startTime = new Date(stageStartTime);
        //   const endTime = new Date(stageStartTime);
        //   endTime.setHours(endTime.getHours() + batchHours);  // Calculate end time based on hours required for the batch
        const batchStart = new Date(lastBatchEndTime); // start from previous batch end
        const batchEnd = new Date(batchStart.getTime() + stage.hoursRequiredMinQty * 60 * 60 * 1000); // add duration
          // Create and save the schedule for this batch
          const scheduledQuantity = Math.min(batchSize, remainingQuantity);  // Quantity for this batch (ensure it doesn't exceed remainingQuantity)
      
          const newSchedule = new Schedule({
            orderID: order._id,
            stageName: stage.stageName,
            machineID: machine._id,
            scheduledStart: batchStart,
            scheduledEnd: batchEnd,
            status: 'Scheduled',
            batchNumber: batch,
            quantity: scheduledQuantity,
          });
      
          await newSchedule.save();  // Save the schedule to the database
      
          console.log(`‚úÖ Scheduled ${stage.stageName} - Batch ${batch} from ${batchStart} to ${batchEnd} on Machine ${machine.machineName} | Quantity: ${scheduledQuantity}`);
      
          // Update remainingQuantity after scheduling this batch
          remainingQuantity -= scheduledQuantity;  // Subtract the scheduled quantity from the remaining material for this stage
      
          // Update start time for next batch
          lastBatchEndTime = new Date(batchEnd);  // Set the start time of the next batch to the end time of the current batch
      
          // If all material for the stage is processed, exit the loop
          if (remainingQuantity <= 0) {
            console.log(`üéâ All material processed for ${stage.stageName}`);
            break;  // Exit the loop since all material has been processed
          }
        }
      }
    }
// Get schedules for a specific order ID
const getScheduleByOrder = async (orderId) => {
  const schedules = await Schedule.find({ orderID: orderId })
    .populate('machineID')
    .populate('orderID');
    
  return schedules;
};

module.exports = { autoSchedule, getScheduleByOrder };
